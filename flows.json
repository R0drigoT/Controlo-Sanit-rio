[
    {
        "id": "56fdf5f6ac54dae6",
        "type": "tab",
        "label": "Dashboard Principal",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2d3c04e32cd84faa",
        "type": "mqtt in",
        "z": "56fdf5f6ac54dae6",
        "name": "MQTT AirQuality",
        "topic": "IPB/IoT/Lab/AirQuality",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9b9278add63b0cae",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 160,
        "y": 380,
        "wires": [
            [
                "0d5e42eeec6e95dd"
            ]
        ]
    },
    {
        "id": "0d5e42eeec6e95dd",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Processar Sensores Reais",
        "func": "let p = msg.payload;\n\nlet temp = p.temp || 0;\nlet hum = p.hum || 0;\nlet iaq = p.iaq || 0;\nlet co2 = p.co2_eqv || 0;\n\n\nreturn [\n  { payload: temp },\n  { payload: hum },\n  { payload: iaq },\n  { payload: co2 },\n];",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 380,
        "wires": [
            [
                "b42dea64db1239bf"
            ],
            [
                "6730b1f04f72d339"
            ],
            [
                "6a09e6c7a6b3bd4d"
            ],
            [
                "eab4bf22171b3218",
                "5da2d79b88b01e95"
            ]
        ]
    },
    {
        "id": "b42dea64db1239bf",
        "type": "ui_gauge",
        "z": "56fdf5f6ac54dae6",
        "name": "Temperatura (ºC)",
        "group": "abafec44acdbbf7f",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Int. (ºC)",
        "label": "ºC",
        "format": "{{value}}",
        "min": 0,
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 18,
        "seg2": "27",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "6730b1f04f72d339",
        "type": "ui_gauge",
        "z": "56fdf5f6ac54dae6",
        "name": "Humidade Interna (%)",
        "group": "abafec44acdbbf7f",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Humidade Int. (%)",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 30,
        "seg2": 60,
        "diff": false,
        "className": "",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "6a09e6c7a6b3bd4d",
        "type": "ui_gauge",
        "z": "56fdf5f6ac54dae6",
        "name": "Air Quality Index (IAQ)",
        "group": "abafec44acdbbf7f",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Air Quality Index (IAQ)",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "eab4bf22171b3218",
        "type": "ui_gauge",
        "z": "56fdf5f6ac54dae6",
        "name": "Concentração de CO2 (ppm)",
        "group": "abafec44acdbbf7f",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Concentração de CO2 (ppm)",
        "label": "ppm",
        "format": "{{value}}",
        "min": 300,
        "max": 3500,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1000",
        "seg2": "1900",
        "diff": false,
        "className": "",
        "x": 720,
        "y": 400,
        "wires": []
    },
    {
        "id": "5da2d79b88b01e95",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Format CO2 para gráfico",
        "func": "return {payload: msg.payload, timestamp: Date.now()};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "7b7f5a74eec161cb"
            ]
        ]
    },
    {
        "id": "7b7f5a74eec161cb",
        "type": "ui_chart",
        "z": "56fdf5f6ac54dae6",
        "name": "Histórico CO2",
        "group": "abafec44acdbbf7f",
        "order": 10,
        "width": 6,
        "height": "4",
        "label": "CO2 (ppm) - Últimos 7 dias",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "Aguardando dados...",
        "dot": false,
        "ymin": "0",
        "ymax": "3500",
        "removeOlder": "7",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "inject_timer_ipma",
        "type": "inject",
        "z": "56fdf5f6ac54dae6",
        "name": "Timer 30min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "100",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "http_request_ipma"
            ]
        ]
    },
    {
        "id": "http_request_ipma",
        "type": "http request",
        "z": "56fdf5f6ac54dae6",
        "name": "GET IPMA Bragança",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://api.ipma.pt/open-data/forecast/meteorology/cities/daily/1040200.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "process_ipma"
            ]
        ]
    },
    {
        "id": "process_ipma",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Processar Temperaturas IPMA",
        "func": "let data = msg.payload.data;\n\nlet today = data[0];\n\nlet tMin = parseFloat(today.tMin);\nlet tMax = parseFloat(today.tMax);\nlet tAvg = ((tMin + tMax) / 2).toFixed(1);\n\nmsg.payload = {\n    tMin: tMin,\n    tMax: tMax,\n    tAvg: parseFloat(tAvg)\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            [
                "ui_text_tmin",
                "ui_text_tmax",
                "ui_text_tavg"
            ]
        ]
    },
    {
        "id": "ui_text_tmin",
        "type": "ui_text",
        "z": "56fdf5f6ac54dae6",
        "group": "ui_group_ipma",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Temperatura Min",
        "label": "Temperatura Min (ºC)",
        "format": "{{msg.payload.tMin}} ºC",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 910,
        "y": 620,
        "wires": []
    },
    {
        "id": "ui_text_tmax",
        "type": "ui_text",
        "z": "56fdf5f6ac54dae6",
        "group": "ui_group_ipma",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Temperatura Max",
        "label": "Temperatura Max (ºC)",
        "format": "{{msg.payload.tMax}} ºC",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "ui_text_tavg",
        "type": "ui_text",
        "z": "56fdf5f6ac54dae6",
        "group": "ui_group_ipma",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Temperatura Média",
        "label": "Temperatura Média (ºC)",
        "format": "{{msg.payload.tAvg}} ºC",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 910,
        "y": 700,
        "wires": []
    },
    {
        "id": "mqtt_externalnode",
        "type": "mqtt in",
        "z": "56fdf5f6ac54dae6",
        "name": "MQTT ExternalNode",
        "topic": "IPB/IoT/Lab/ExternalNode",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9b9278add63b0cae",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 840,
        "wires": [
            [
                "process_external"
            ]
        ]
    },
    {
        "id": "process_external",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Processar Sensores Externos",
        "func": "let p = msg.payload;\n\nlet temp = p.temp || p.temperature || 0;\nlet hum = p.hum || p.humidity || 0;\n\nreturn [{payload: temp}, {payload: hum}];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "ui_gauge_temp"
            ],
            [
                "ui_gauge_hum"
            ]
        ]
    },
    {
        "id": "ui_gauge_temp",
        "type": "ui_gauge",
        "z": "56fdf5f6ac54dae6",
        "name": "Temperatura Externa (ºC)",
        "group": "ui_group_temp",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Temperatura Ext. (ºC)",
        "label": "ºC",
        "format": "{{value}}",
        "min": "-10",
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "18",
        "seg2": "27",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 800,
        "wires": []
    },
    {
        "id": "ui_gauge_hum",
        "type": "ui_gauge",
        "z": "56fdf5f6ac54dae6",
        "name": "Humidade Externa (%)",
        "group": "ui_group_temp",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Humidade Ext. (%)",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 30,
        "seg2": 60,
        "diff": false,
        "className": "",
        "x": 720,
        "y": 880,
        "wires": []
    },
    {
        "id": "833d9144ae7e6431",
        "type": "mqtt in",
        "z": "56fdf5f6ac54dae6",
        "name": "Subscrição Estado Automático",
        "topic": "IPB/IoT/Lab/Actuators/State",
        "qos": "0",
        "datatype": "json",
        "broker": "9b9278add63b0cae",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 240,
        "y": 1000,
        "wires": [
            [
                "34aa9d379d441c2e"
            ]
        ]
    },
    {
        "id": "34aa9d379d441c2e",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Estado Automático",
        "func": "const estadoJanelaNum = Number(msg.payload.estadoJanela) || 1;\nconst estadoCortinaNum = Number(msg.payload.estadoCortina) || 1;\nconst estadoACNum = Number(msg.payload.estadoAC) || 0;\n\nlet estadoJanela = \"fechada\";\nlet estadoCortina = \"baixa\";\nlet modoAC = \"desligado\";\n\n// Conversão de número para string — Janela\nif (estadoJanelaNum === 2) estadoJanela = \"semi-aberta\";\nelse if (estadoJanelaNum === 3) estadoJanela = \"aberta\";\n\n// Cortina\nif (estadoCortinaNum === 2) estadoCortina = \"média\";\nelse if (estadoCortinaNum === 3) estadoCortina = \"alta\";\n\n// AC\nif (estadoACNum === 1) modoAC = \"aquecer\";\nelse if (estadoACNum === 2) modoAC = \"arrefecer\";\nelse if (estadoACNum === 3) modoAC = \"ventilar\";\n\n// Guardar estado combinado\nflow.set('estadoAutomatico', {\n    cortina: estadoCortina,\n    janela: estadoJanela,\n    ac: modoAC\n});\n\nreturn null;\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3b90b7aadd69949e",
        "type": "ui_dropdown",
        "z": "56fdf5f6ac54dae6",
        "name": "Cortina Manual",
        "label": "Cortina ",
        "tooltip": "",
        "place": "",
        "group": "groupAtuadores",
        "order": 1,
        "width": "6",
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Automático",
                "value": "",
                "type": "str"
            },
            {
                "label": "Baixa",
                "value": "baixa",
                "type": "str"
            },
            {
                "label": "Média",
                "value": "média",
                "type": "str"
            },
            {
                "label": "Alta",
                "value": "alta",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "cortina",
        "topicType": "str",
        "className": "",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "283e419034f0ab75"
            ]
        ]
    },
    {
        "id": "e1c4ea0e57db6d2c",
        "type": "ui_dropdown",
        "z": "56fdf5f6ac54dae6",
        "name": "Janela Manual",
        "label": "Janela ",
        "tooltip": "",
        "place": "",
        "group": "groupAtuadores",
        "order": 2,
        "width": "6",
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Automático",
                "value": "",
                "type": "str"
            },
            {
                "label": "Fechada",
                "value": "fechada",
                "type": "str"
            },
            {
                "label": "Semi-aberta",
                "value": "semi-aberta",
                "type": "str"
            },
            {
                "label": "Aberta",
                "value": "aberta",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "janela",
        "topicType": "str",
        "className": "",
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "283e419034f0ab75"
            ]
        ]
    },
    {
        "id": "c0f145d800f5931c",
        "type": "ui_dropdown",
        "z": "56fdf5f6ac54dae6",
        "name": "Ar Condicionado Manual",
        "label": "Ar Condicionado ",
        "tooltip": "",
        "place": "",
        "group": "groupAtuadores",
        "order": 3,
        "width": "6",
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Automático",
                "value": "",
                "type": "str"
            },
            {
                "label": "Desligado",
                "value": "desligado",
                "type": "str"
            },
            {
                "label": "Aquecer",
                "value": "aquecer",
                "type": "str"
            },
            {
                "label": "Arrefecer",
                "value": "arrefecer",
                "type": "str"
            },
            {
                "label": "Ventilar",
                "value": "ventilar",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "ac",
        "topicType": "str",
        "className": "",
        "x": 150,
        "y": 1200,
        "wires": [
            [
                "283e419034f0ab75"
            ]
        ]
    },
    {
        "id": "283e419034f0ab75",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Guardar Estados Manuais",
        "func": "let manual = flow.get('manual') || { cortina: '', janela: '', ac: '' };\n\n// Atualiza o campo que veio (msg.topic pode ser 'janela', 'cortina' ou 'ac')\nmanual[msg.topic] = msg.payload;\n\n// Função que verifica se valor manual está ativo\nfunction isManualActive(value) {\n    return typeof value === 'string' && value.trim() !== '' && value.toLowerCase() !== 'automático';\n}\n\n// Atualiza flag manualActive\nmanual.manualActive = isManualActive(manual.cortina) || isManualActive(manual.janela) || isManualActive(manual.ac);\n\nflow.set('manual', manual);\n\n// Cria o payload JSON a publicar para o ESP32\nmsg.payload = {\n    cortina: manual.cortina,\n    janela: manual.janela,\n    ac: manual.ac,\n    manualActive: manual.manualActive\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1180,
        "wires": [
            [
                "e392f181a9ba020f"
            ]
        ]
    },
    {
        "id": "40421bbbee8cc870",
        "type": "inject",
        "z": "56fdf5f6ac54dae6",
        "name": "Trigger Combinar Estados",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "b8336530586722ad"
            ]
        ]
    },
    {
        "id": "b8336530586722ad",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Combinar Estados Manual e Automático",
        "func": "let manual = flow.get('manual') || { cortina: '', janela: '', ac: '' };\nlet automatico = flow.get('estadoAutomatico') || { cortina: 'baixa', janela: 'fechada', ac: 'desligado' };\n\n// Se manual ativo e valor definido, usa manual; caso contrário, usa automático\nlet cortina = manual.manualActive && manual.cortina ? manual.cortina : automatico.cortina;\nlet janela = manual.manualActive && manual.janela ? manual.janela : automatico.janela;\nlet ac = manual.manualActive && manual.ac ? manual.ac : automatico.ac;\n\nreturn [\n  { payload: cortina },\n  { payload: janela },\n  { payload: ac }\n];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1340,
        "wires": [
            [
                "d4dbfaa4aa30581a"
            ],
            [
                "20962af7ba15a6b7"
            ],
            [
                "bd7bfd6f5b598bec"
            ]
        ]
    },
    {
        "id": "d4dbfaa4aa30581a",
        "type": "ui_text",
        "z": "56fdf5f6ac54dae6",
        "group": "5e20dcf64f8794c1",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "Estado Cortina",
        "label": "Cortina:",
        "format": "<b>{{msg.payload}}</b>",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 780,
        "y": 1300,
        "wires": []
    },
    {
        "id": "20962af7ba15a6b7",
        "type": "ui_text",
        "z": "56fdf5f6ac54dae6",
        "group": "5e20dcf64f8794c1",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "Estado Janela",
        "label": "Janela:",
        "format": "<b>{{msg.payload}}</b>",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 780,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bd7bfd6f5b598bec",
        "type": "ui_text",
        "z": "56fdf5f6ac54dae6",
        "group": "5e20dcf64f8794c1",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Modo Ar Condicionado",
        "label": "Ar Condicionado:",
        "format": "<b>{{msg.payload}}</b>",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 800,
        "y": 1380,
        "wires": []
    },
    {
        "id": "e392f181a9ba020f",
        "type": "mqtt out",
        "z": "56fdf5f6ac54dae6",
        "name": "",
        "topic": "IPB/IoT/Lab/Actuators/ManualState",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b9278add63b0cae",
        "x": 820,
        "y": 1180,
        "wires": []
    },
    {
        "id": "062bb178a2be68c9",
        "type": "mqtt in",
        "z": "56fdf5f6ac54dae6",
        "name": "MQTT AirQuality",
        "topic": "IPB/IoT/Lab/AirQuality",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9b9278add63b0cae",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 160,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "bddd03994824eb09",
        "type": "mqtt in",
        "z": "56fdf5f6ac54dae6",
        "name": "MQTT Temperatura Humidade",
        "topic": "IPB/IoT/Lab/AirQuality",
        "qos": "0",
        "datatype": "json",
        "broker": "9b9278add63b0cae",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 80,
        "wires": [
            [
                "29f90b93ddc86849"
            ]
        ]
    },
    {
        "id": "29f90b93ddc86849",
        "type": "function",
        "z": "56fdf5f6ac54dae6",
        "name": "Formatar para InfluxDB",
        "func": "const temp = msg.payload.temp;\nconst hum = msg.payload.hum;\nconst iaq = msg.payload.iaq;\nconst co2 = msg.payload.co2_eqv;\n\nmsg.payload = [\n  {\n    measurement: \"sensor_interno\",\n    fields: {\n      temperatura: temp,\n      humidade: hum,\n      iaq: iaq,\n      co2: co2\n    }\n  }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            [
                "acc25ae3ce99713f"
            ]
        ]
    },
    {
        "id": "acc25ae3ce99713f",
        "type": "influxdb batch",
        "z": "56fdf5f6ac54dae6",
        "influxdb": "add84f60a262aa17",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "Enviroment",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "9b9278add63b0cae",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "abafec44acdbbf7f",
        "type": "ui_group",
        "name": "Sensores Internos",
        "tab": "31cb3529fd15f110",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_ipma",
        "type": "ui_group",
        "name": "IPMA Bragança ",
        "tab": "31cb3529fd15f110",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_temp",
        "type": "ui_group",
        "name": "Sensores Externos",
        "tab": "31cb3529fd15f110",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "groupAtuadores",
        "type": "ui_group",
        "name": " Modo Manual",
        "tab": "31cb3529fd15f110",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5e20dcf64f8794c1",
        "type": "ui_group",
        "name": "Atuadores e Estado",
        "tab": "31cb3529fd15f110",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "add84f60a262aa17",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "Enviroment",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://127.0.0.1:8086",
        "timeout": 10,
        "rejectUnauthorized": false
    },
    {
        "id": "31cb3529fd15f110",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]